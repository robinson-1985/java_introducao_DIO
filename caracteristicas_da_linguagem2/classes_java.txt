Uma classe é um elemento do código Java que utilizamos para representar objetos do
mundo real. Dentro dela é comum declararmos atributos e métodos, que representam, 
respectivamente, as características e comportamentos desse objeto. Neste documento 
será apresentado como declarar e utilizar uma classe em Java.

Sintaxe

A declaração de uma classe em Java é bastante simples. Utilizamos a palavra reservada 
class seguida pelo nome da classe. Logo após, entre chaves, definimos os elementos a
ela relacionados: atributos, construtores e métodos. Sintaxe de declaração de classe:

<modificador de acesso> class NomeDaClasse {

  // Local onde atributos, construtores e métodos são criados

}

Note que também é possível especificar o modificador de acesso. Por meio dele informamos a visibilidade da classe, que pode ser public, private ou default.

Exemplo de declaração de classe:

public class Produto {

  private String nome;
  private int quantidade;

  public Produto() {
    // Código do construtor
  }

  public void apresentarProduto() {
    // Código do método
  }

}

Este exemplo apresenta o código da classe Produto. Como foi declarada como public, 
poderá ser utilizada por todas as classes do projeto. Além disso, ela possui dois 
atributos (nome e quantidade), um construtor sem argumentos e um método.

Regras para nomeação de classes
Ao nomear uma classe algumas convenções devem ser seguidas:

1.Manter o nome simples e descritivo;
2.Usar palavras inteiras, isto é, sem siglas e abreviações;
3.A primeira letra de cada palavra deve estar em caixa alta.

Como utilizar

Para utilizar uma classe devemos declará-la da mesma maneira que se declara uma 
variável de tipo primitivo. Declaramos o tipo (neste caso o nome da classe) seguido 
pelo nome da variável.

Exemplo de instanciação de classe:

Produto produtoUm;
produtoUm = new Produto();
produtoUm.apresentarProduto();

O método main

Toda classe pode ter um método main, que determina o ponto de início de execução de 
qualquer aplicação Java. Ao contrário do que acontece em C e C++, onde apenas uma 
função main deve ser definida para a aplicação como um todo, toda e qualquer classe
Java pode ter um método main definido. Apenas no momento da interpretação o main a 
ser executado é definido através do primeiro argumento (o nome da classe) para o 
programa interpretador.

O método main é um método associado à classe e não a um objeto específico da 
classe -- assim, ele é definido como um método estático. Adicionalmente, deve ser 
um método público para permitir sua execução a partir da máquina virtual Java. Não 
tem valor de retorno, mas recebe como argumento um arranjo de strings que corresponde
aos parâmetros que podem ser passados para a aplicação a partir da linha de comando.
Essas características determinam a assinatura do método.

           ATRIBUTOS E MÉTODOS EM JAVA.

Atributos são as características de um objeto, essas características também são 
conhecidas como variáveis, utilizando o exemplo dos cães, temos alguns atributos, 
tais como: cor, peso, altura e nome.

public class Cachorro{

            public String nome;

            public float peso;

            public float altura;

            public String cor;

}

Métodos são as ações que os objetos podem exercer quando solicitados, onde podem 
interagir e se comunicarem com outros objetos, utilizando o exemplo dos cães, temos 
alguns exemplos: latir, correr, pular.

Implementando a classe “Cachorro” além dos Atributos, agora com Métodos:

public class Cachorro{

            public String nome;

            public float peso;

            public float altura;

            public String cor;

 

            void pular {

                        if (altura >= 80){

                                    System.out.println(“Seu cachorro pula alto”);

                        }

                        if (altura < 80 || altura >= 50{

                                    System.out.println(“Seu cachorro pula normalmente”)

                        }

                        else{

                                    System.out.println(“Seu cachorro pula baixo”)

}

}

}

                                Construtores

O (pseudo-)método construtor determina que ações devem ser executadas quando da 
criação de um objeto. Em Java, o construtor é definido como um método cujo nome 
deve ser o mesmo nome da classe e sem indicação do tipo de retorno -- nem mesmo void.
O construtor é unicamente invocado no momento da criação do objeto através do operador
new.

O retorno do operador new é uma referência para o objeto recém-criado. O construtor
pode receber argumentos, como qualquer método. Usando o mecanismo de sobrecarga, mais 
de um construtor pode ser definido para uma classe. Veja por exemplo os construtores 
definidos para a classe Point de Java.

Toda classe tem pelo menos um construtor sempre definido. Se nenhum construtor for 
explicitamente definido pelo programador da classe, um construtor padrão, que não 
recebe argumentos, é incluído para a classe pelo compilador Java. No entanto, se o 
programador da classe criar pelo menos um método construtor, o construtor padrão 
não será criado automaticamente -- se o programador desejar mantê-lo, deverá criar 
um construtor sem argumentos explicitamente.

No momento em que um construtor é invocado, a seguinte seqüência de ações é executada
para a criação de um objeto:

1. O espaço para o objeto é alocado e seu conteúdo é inicializado (bitwise) com zeros.

2. O construtor da classe base é invocado. Se a classe não tem uma superclasse definida
explicitamente, a classe Object é a classe base.

3. Os membros da classe são inicializados para o objeto, seguindo a ordem em que 
foram declarados na classe.

4.O restante do corpo do construtor é executado.

Seguir essa seqüência é uma necessidade de forma a garantir que, quando o corpo de 
um construtor esteja sendo executado, o objeto já terá à disposição as funcionalidades 
mínimas necessárias, quais sejam aquelas definidas por seus ancestrais. O primeiro 
passo garante que nenhum campo do objeto terá um valor arbitrário, que possa tornar 
erros de não inicialização difíceis de detectar.



