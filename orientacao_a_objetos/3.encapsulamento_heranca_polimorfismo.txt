                    ENCAPSULAMENTO

Mais uma vez vamos entender o tempo que estamos trabalhando ao pé da letra.

Quando falamos de encapsulamento, estamos falando efetivamente em proteger alguma
informação de alguma forma, ou seja, com uma cápsula.

Vamos ver como podemos trabalhar com o encapsulamento nos nossos exemplos anteriores 
da Classe Pessoa.

Na nossa classe, vamos manipular basicamente atributos:

- Nome;
- Data Nascimento.

Abaixo, não é uma boa prática porque deixa desprotegidas as informações:

public classe Pessoa {

    public String nome;
    public LocalDate Nascimento;

}

O que queremos então?

Garantirmos a nossa implementação e que o acesso a determinados dados estão realmente 
protegidos do acesso externo.

                Mas, afinal o que queremos?

Para esse exemplo específico:

- Queremos que o nome possa seja alterado.
Vamos pensar que uma pessoa pode casar e mudar seu nome;

-Não queremos alterar a data de nascimento.
A pessoa nasce com ela e não pode mudar;

-Queremos de alguma forma retornar a idade da pessoa.

public class Exemplo001 {

    public static void main(String[] args) {

        Pessoa eu = new Pessoa("Robinson", 07, 05, 1985);

        System.out.printl(eu.get.Nome());
        System.out.printl(eu.getDataNascimento());
        System.out.printl(eu.calculaidade());

        eu.setNome("Robinson Dias");

        System.out.printl(eu.getNome());
    }
}

- Defino meu nome e minha data de nascimento no contrato;
- Consigo mudar meu nome posteriormente;
- Consigo ler meu nome a qualquer momento;
- Consigo apenas ler minha data de nascimento;
- Consigo calcular quantos anos eu tenho sem precisar conhecer a implementação.

Ex:

public class Exemplo001 {

    public static void main(String[] args) {

        Pessoa eu = new Pessoa( "Marco", 19, 05, 1990);

        System.out.println(eu.getNome());
        System.out.println(eu.getDataNascimento());
        System.out.println(eu.calculaIdade());

        eu.setNome("Marco Paulo");

        System.out.println(eu.getNome());

    }
}

                    HERANÇA

Como o próprio nome já diz, essa é a capacidade de uma Classe herdar o 
comportamento de outra.

Ex: vamos pensar em um cenário onde queremos modelar um veículo.

public class Veiculo {

    private String modelo;
    private String marca;

}

Agora, eu quero colocar a quantidade de portas para o caso de carros e as 
cilindradas em casos de motocicletas.

Ex: o exemplo abaixo não pode ocorrrer!!!! NÃO PODE

public class Veiculo {

    private String modelo;
    private String marca;
    private int quantidadeDePortas;
    private String cilindradas;

}

Vamos para os exemplos de Herança que pode ser trabalhado:

public class Veiculo {

    private String modelo;
    private String marca;

}

Aí as classes herdam!!!!!!! =>>

public class Carro extends Veiculo {

    private int quantidadeDePortas;

}

public class Motocicleta extends Veiculo {

    private String cilindradas;

}

Depois de definir os getters e setters ==>>

public class Exemplo001 {

    public static void main(String[] args) {

        Carro carro = new Carro();
        carro.setMarca("Nissan");
        carro.setModelo("March");
        carro.setQuantidadeDePortas(4);
        
        Moto mot = new Moto();
        moto.setMarca("Ducati");
        moto.setModelo("Street Fighter");
        moto.setCilindradas("850");

    }
}

Também aproveitams comportamentos. Neste cenário, temos o método acelerar() na 
classe veiculo.

public static void main(Strings[] args) {

    Carro carro = new Carro();
    carro.acelera();

    Motocicleta moto = new Motocicleta();
    moto.acelera();

}







