                    ENCAPSULAMENTO

Mais uma vez vamos entender o tempo que estamos trabalhando ao pé da letra.

Quando falamos de encapsulamento, estamos falando efetivamente em proteger alguma
informação de alguma forma, ou seja, com uma cápsula.

Vamos ver como podemos trabalhar com o encapsulamento nos nossos exemplos anteriores 
da Classe Pessoa.

Na nossa classe, vamos manipular basicamente atributos:

- Nome;
- Data Nascimento.

Abaixo, não é uma boa prática porque deixa desprotegidas as informações:

public classe Pessoa {

    public String nome;
    public LocalDate Nascimento;

}

O que queremos então?

Garantirmos a nossa implementação e que o acesso a determinados dados estão realmente 
protegidos do acesso externo.

                Mas, afinal o que queremos?

Para esse exemplo específico:

- Queremos que o nome possa seja alterado.
Vamos pensar que uma pessoa pode casar e mudar seu nome;

-Não queremos alterar a data de nascimento.
A pessoa nasce com ela e não pode mudar;

-Queremos de alguma forma retornar a idade da pessoa.

public class Exemplo001 {

    public static void main(String[] args) {

        Pessoa eu = new Pessoa("Robinson", 07, 05, 1985);

        System.out.printl(eu.get.Nome());
        System.out.printl(eu.getDataNascimento());
        System.out.printl(eu.calculaidade());

        eu.setNome("Robinson Dias");

        System.out.printl(eu.getNome());
    }
}

- Defino meu nome e minha data de nascimento no contrato;
- Consigo mudar meu nome posteriormente;
- Consigo ler meu nome a qualquer momento;
- Consigo apenas ler minha data de nascimento;
- Consigo calcular quantos anos eu tenho sem precisar conhecer a implementação.

Ex:

public class Exemplo001 {

    public static void main(String[] args) {

        Pessoa eu = new Pessoa( "Marco", 19, 05, 1990);

        System.out.println(eu.getNome());
        System.out.println(eu.getDataNascimento());
        System.out.println(eu.calculaIdade());

        eu.setNome("Marco Paulo");

        System.out.println(eu.getNome());

    }
}

                    HERANÇA

Como o próprio nome já diz, essa é a capacidade de uma Classe herdar o 
comportamento de outra.

Ex: vamos pensar em um cenário onde queremos modelar um veículo.

public class Veiculo {

    private String modelo;
    private String marca;

}

Agora, eu quero colocar a quantidade de portas para o caso de carros e as 
cilindradas em casos de motocicletas.

Ex: o exemplo abaixo não pode ocorrrer!!!! NÃO PODE

public class Veiculo {

    private String modelo;
    private String marca;
    private int quantidadeDePortas;
    private String cilindradas;

}

Vamos para os exemplos de Herança que pode ser trabalhado:

public class Veiculo {

    private String modelo;
    private String marca;

}

Aí as classes herdam!!!!!!! =>>

public class Carro extends Veiculo {

    private int quantidadeDePortas;

}

public class Motocicleta extends Veiculo {

    private String cilindradas;

}

Depois de definir os getters e setters ==>>

public class Exemplo001 {

    public static void main(String[] args) {

        Carro carro = new Carro();
        carro.setMarca("Nissan");
        carro.setModelo("March");
        carro.setQuantidadeDePortas(4);
        
        Moto mot = new Moto();
        moto.setMarca("Ducati");
        moto.setModelo("Street Fighter");
        moto.setCilindradas("850");

    }
}

Também aproveitams comportamentos. Neste cenário, temos o método acelerar() na 
classe veiculo.

public static void main(Strings[] args) {

    Carro carro = new Carro();
    carro.acelera();

    Motocicleta moto = new Motocicleta();
    moto.acelera();

}

                HERANÇA VERSUS COMPOSIÇÃO 

Existe um vasto e antigo debate em relação a utilização de herança. Algumas 
bibliografias inclusive defendem que ela nunca deve ser utilizada. 

E o grande problema tem relação com o noso tópico anterior: o encapsulamento.

A subclasse necesita conhecer, em muitos casos, a implementação da suuperclasse, 
o que cria um acoplamento e quebra a nossa premissa bbásica do isolamento que 
vimos no encapsulamento.

                        POLIMORFISMO

Quando falamos em herança, o verbo ser é mandatório na noss forma de falar 
sobre a classe. 

Entendemos, portanto, que um carro é um veículo e uma motocicleta também é 
um veículo. 

Agora no nosso exemplo, nós queremos colocar mais uma caraterística e uma ação 
que podem ser comuns aos dois, mas com algumas peculiaridades.

Agora vamos calcular o valor aproximado do IPVA de nosso diferentes tipos de 
veículos. 

Tanto carros qiantos motos pagam IPVA! E o cálculo é baseado no valor venal do 
veículo.

Portanto, a primeira conclusão que chegamos é que temos uma característica nova
na nossa Classe de Veículos, agora temos o valor venal, então:

public class Veiculo {

    private String modelo;
    private String marca;

    public double valorVenal;

}

Mas, precisamos calcular a nossa precisão de imposto.

Vamos partir do príncipio que (valores hipotéticos):

- Um veículo teria que pagar, no mínimo, 0.01% do valor venal de IPVA;

- Um carro teria que pagar, no mínimo, 0.07% do valor venal de IPVA;

- Uma moto teria que pagar, no mínimo, 0.03% do valor venal de IPVA.

Para isso precisaremos definir implementações diferentes de acordo com as classe
que estamos trablhando.

É onde entraria o POLIMORFISMO.

Ele nos garantirá a capacidade de um objeto ser referenciado de múltiplas formas.

O Java será capaz de identificar qual objeto foi instanciado e, assim, escolher 
qual método será utilizado.

Vamos ver como ficaria:

public class Veiculo {

    ...

    private double valorVenal;

    ...

    public double calculaImposto(){
        return this.valorVenal * 0.01;
    }

}


public class Motocicleta extends Veiculo {

    ...

    public double calculaImposto(){
        return this.valorVenal * 0.03;
    }

}

public class Carro extends Veiculo {

    ...

    public double calculaImposto(){
        return this.valorVenal * 0.07;
    }

}

public static void main(String[] args) {

    Veiculo generico = new Veiculo();
    generico.setValorVenal(1000.0);
    System.out.println(generico.calculaImposto()); // 10.0

    Veiculo carro = new Carro();
    generico.setValorVenal(1000.0);
    System.out.println(generico.calculaImposto()); // 70.0

    Veiculo moto = new Motocicleta();
    generico.setValorVenal(1000.0);
    System.out.println(generico.calculaImposto()); // 30.0
}


                            Exercício final
                            
Vamos pensar em um cenário onde temos
Funcionários. Esses funcionários podem ser: Gerente,
Supervisor e Atendente.
Cada tipo de funcionário desses tem políticas
diferentes de impostos:
- Gerente paga 0,1% do salário;
- Supervisor paga 0,05% do salário;
- Atendente paga 0,01% do salário.
Monte um modelo que atenda esse cenário.









