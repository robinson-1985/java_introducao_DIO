                        O java.util.Date

Antes de qualquer coisa, vamos definir aqui o ponto que estamos.

A implementação do java.util.Date está na JDK desde sua versão 1.0

Ou seja... É de se esperar que algumas coisas não se mostrem tão 
interessantes nos dias atuais, dado a sua idade.

Nesse primeiro momento, vamos ver como podemos trabalhar com a 
manipulação de datas a Classe java.util.Date do Java. 

E o nosso primeiro passo é dar uma olhada na documentação oficial.

Vamos usar como referência o Java 8

https://docs.oracle.com/javase/8/docs/api/java/util/Date.html

E para começar a falar sobre o Java Date, vamos falar sobre seus 
construtores. São eles:

Exemplo:

Date()

Date(int year, int month, int date)

Date(int year, int month, int date, int hrs, int min)

Date(int year, int month, int date, int hrs, int min, int sec)

Date(long date)

Date(String s)

Entretanto alguns estão marcados como deprecated:

//Todos estão marcados como @Deprecated desde a versão 1.1 da JDK 

Date()

Date(int year, int month, int date)

Date(int year, int month, int date, int hrs, int min)

Date(int year, int month, int date, int hrs, int min, int sec)

Date(long date)

Date(String s)


Portanto só vamos estudar os seguintes construtores:

Date()

Date(long date)

                    Date()


Este construtor vai alocar um objeto da classe Date e o inicializará com 
o milissegundo mais próximo do período da sua execução

Date()        
            import java.util.Date;

            public class Exemplo001 {
                public static void main(String[] args) {

                    Date novaData = new Date();
                    System.out.printl(novaData);

                    //retorna: Sun Mar 14 10:30:00 BRT 2021
                }
            }

                            Date(long date)

Diferente do construtor anterior, esse construtor espera que você passe os 
milissegundos com base padrão de tempo (epoch) que usa como referência 1 de 
janeiro de 1970 00:00:00.

Uma pequena pausa... O que é o Epoch?

“O epoch timestamp é um padrão largamente aceito para representar uma data 
como um inteiro 32-bits a partir do início do Unix Epoch...”

                                Date(long date)

Vamos testar com base no System.currentTimeMillis()

Esse método estático vai nos retornar o milissegundo mais próximo de sua 
execução com base no Sistema Operacional.

import java.util.Date;

public class Exemplo002 {
    public static void main(String[] args) {

        Long currentTimeMillis = System.currentTimeMillis();

        System.out.println(currentTimeMillis);
        // 1563127311564

        Date novaData = new Date(currentTimeMillis);

        System.out.println(novaData);
        // Sun Mar 14 11:27:56 BRT 2021

    }
}

                    Métodos úteis

Alguns métodos da classe Date são muito úteis e serão usados com frequência 
durante a manipulação de datas.

São eles...

Método              Retorno                 Descrição

after(Date)         boolean        Checa se o objeto Data de referência é
                                   posterior ao comparado

before(Date)        boolean        Checa se o objeto Data de referência é
                                   anterior ao comparado

compareTo(Date)       int          Compara dois objetos Data

equals(Date)        boolean        Checa se os objetos são iguais

getTime()            long          Retorna a data em milissegundos

setTime(long)        void          Define uma data com base em
                                   milissegundos

from(Instante)      static Date    Define uma data com base em um Instant

toInstant()         Instant        Retorna um Instant com base em um Date


after e before
              
        import java.util.Date;

        /**
        *  Exemplo de utilização dos metodos after e before
        */

        public class Exemplo003 {
            public static void main(String[] args) {

                Date dataNoPassado = new Date(1513124807691L);
                //Tue Dec 12 22:26:47 BRST 2017

                Date dataNoFuturo = new Date(1613124807691L);
                //Fri Feb 12 08:13:27 BRST 2021

                /** Comparando se a dataNoPassado é posterior a dataNoFuturo */
                boolean isAfter = dataNoPassado.after(dataNoFuturo);

                System.out.println(isAfter);
                //false

                /** Comparando se a dataNoPassado é anterior a dataNoFuturo */
                boolean isBefore = dataNoPassado.before(dataNoFuturo);

                System.out.println(isBefore);
                //true
            }
        }

compareTo e equals

import java.util.Date;

/**
 *  Exemplo de utilização dos metodos compareTo e equals
 */
public class Exemplo004 {

    public static void main(String[] args) {

        Date dataNoPassado = new Date(1513124807691L); //Tue Dec 12 22:26:47 BRST 2017

        Date dataNoFuturo = new Date(1613124807691L); //Fri Feb 12 08:13:27 BRST 2021

        Date mesmaDataNoFuturo = new Date(1613124807691L); //Fri Feb 12 08:13:27 BRST 2021

        /** Comparando se as datas são iguais */
        boolean isEquals = dataNoFuturo.equals(mesmaDataNoFuturo);

        System.out.println(isEquals); //true

        /** Comparando uma data com a outra */
        int compareCase1 = dataNoPassado.compareTo(dataNoFuturo); //passado -> futuro

        int compareCase2 = dataNoFuturo.compareTo(dataNoPassado); //futuro -> passado

        int compareCase3 = dataNoFuturo.compareTo(mesmaDataNoFuturo); //datas equivalentes

        System.out.println(compareCase1); // -1

        System.out.println(compareCase2); // 1

        System.out.println(compareCase3); // 0

    }
}


                    from e toInstant

Antes de falar sobre esses dois métodos...

                    Classe Instant

- Surgiu na JDK 1.8;

- Imutável e Thread safe;

- Modela um ponto instantâneo de uma linha do tempo;

- Indicado para gravar marcações temporais em eventos da sua
aplicação. 

Exemplo: 


                    Exercício final

Aplique o que aprendemos:

- Descubra o timeInMillis do dia que você nasceu;
- Converta em um objeto Date;
- Verifique se ele é anterior ou posterior a 15 de maio
de 2010.

                    Leia mais sobre...

https://docs.oracle.com/javase/8/docs/api/java/util/D
ate.html

https://docs.oracle.com/javase/8/docs/api/java/lang/
System.html#currentTimeMillis--

https://docs.oracle.com/javase/8/docs/api/java/time/
Instant.html

https://www.javatpoint.com/java-util-date




