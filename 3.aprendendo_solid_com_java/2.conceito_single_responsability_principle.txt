                SRP — Single Responsibility Principle

Princípio da Responsabilidade Única — Uma classe deve ter um, e somente um, 
motivo para mudar.

Esse princípio declara que uma classe deve ser especializada em um único 
assunto e possuir apenas uma responsabilidade dentro do software, ou seja, 
a classe deve ter uma única tarefa ou ação para executar.

Quando estamos aprendendo programação orientada a objetos, sem sabermos, 
damos a uma classe mais de uma responsabilidade e acabamos criando classes 
que fazem de tudo — God Class*. Num primeiro momento isso pode parecer 
eficiente, mas como as responsabilidades acabam se misturando, quando há 
necessidade de realizar alterações nessa classe, será difícil modificar 
uma dessas responsabilidades sem comprometer as outras. Toda alteração 
acaba sendo introduzida com um certo nível de incerteza em nosso sistema
— principalmente se não existirem testes automatizados!

*God Class — Classe Deus: Na programação orientada a objetos, é uma classe 
que sabe demais ou faz demais.

Exemplos práticos escrito em PHP:

 //////////////////////////////////////////////////////////////////////
<?php

class Order
{
    public function calculateTotalSum(){/*...*/}
    public function getItems(){/*...*/}
    public function getItemCount(){/*...*/}
    public function addItem($item){/*...*/}
    public function deleteItem($item){/*...*/}

    public function printOrder(){/*...*/}
    public function showOrder(){/*...*/}

    public function load(){/*...*/}
    public function save(){/*...*/}
    public function update(){/*...*/}
    public function delete(){/*...*/}
}

 ////////////////////////////////////////////////////////////////////

A classe Order viola o SRP porque realiza 3 tipos distintos de tarefas. Além 
de lidar com as informações do pedido, ela também é responsável pela exibição 
e manipulação dos dados. Lembre-se, o princípio da responsabilidade única preza 
que uma classe deve ter um, e somente um, motivo para mudar.

A violação do Single Responsibility Principle pode gerar alguns problemas, 
sendo eles:

Falta de coesão — uma classe não deve assumir responsabilidades que não são 
suas;

Alto acoplamento — Mais responsabilidades geram um maior nível de dependências, 
deixando o sistema engessado e frágil para alterações;

Dificuldades na implementação de testes automatizados — É difícil de “mockar” 
esse tipo de classe;

Dificuldades para reaproveitar o código;

Aplicando o SRP na classe Order, podemos refatorar o código da seguinte forma:

/////////////////////////////////////////////////////////////////////////////

<?php

class Order
{
    public function calculateTotalSum(){/*...*/}
    public function getItems(){/*...*/}
    public function getItemCount(){/*...*/}
    public function addItem($item){/*...*/}
    public function deleteItem($item){/*...*/}
}

class OrderRepository
{
    public function load($orderID){/*...*/}
    public function save($order){/*...*/}
    public function update($order){/*...*/}
    public function delete($order){/*...*/}
}

class OrderViewer
{
    public function printOrder($order){/*...*/}
    public function showOrder($order){/*...*/}
}

////////////////////////////////////////////////////////////////////////////

Perceba no exemplo acima que agora temos 3 classes, cada uma cuidando da 
sua responsabilidade.

O princípio da responsabilidade única não se limita somente a classes, ele 
também pode ser aplicado em métodos e funções, ou seja, tudo que é responsável 
por executar uma ação, deve ser responsável por apenas aquilo que se propõe a 
fazer.

///////////////////////////////////////////////////////////////////////////

<?php

//Ruim:
function emailClients(array $clients): void
{
    foreach ($clients as $client) {
        $clientRecord = $db->find($client);
        if ($clientRecord->isActive()) {
            email($client);
        }
    }
}



// Bom:
function emailClients(array $clients): void
{
    $activeClients = activeClients($clients);
    array_walk($activeClients, 'email');
}

function activeClients(array $clients): array
{
    return array_filter($clients, 'isClientActive');
}

function isClientActive(int $client): bool
{
    $clientRecord = $db->find($client);

    return $clientRecord->isActive();
}

//////////////////////////////////////////////////////////////////////////

Considerando o SRP um dos princípios mais importantes, ele acaba sendo a base 
para outros princípios e padrões porque aborda temas como acoplamento e coesão,
características que todo código orientado a objetos deveria ter.

