                LSP— Liskov Substitution Principle.

Princípio da substituição de Liskov — Uma classe derivada deve ser substituível 
por sua classe base.

O princípio da substituição de Liskov foi introduzido por Barbara Liskov em sua
conferência “Data abstraction” em 1987. A definição formal de Liskov diz que:

Se para cada objeto o1 do tipo S há um objeto o2 do tipo T de forma que, 
para todos os programas P definidos em termos de T, o comportamento de P 
é inalterado quando o1 é substituído por o2 então S é um subtipo de T

Um exemplo mais simples e de fácil compreensão dessa definição. Seria:
se S é um subtipo de T, então os objetos do tipo T, em um programa, 
podem ser substituídos pelos objetos de tipo S sem que seja necessário 
alterar as propriedades deste programa. — Wikipedia.

Exemplos de violação do LSP:

- Sobrescrever/implementar um método que não faz nada;
- Lançar uma exceção inesperada;
- Retornar valores de tipos diferentes da classe base;

Para não violar o Liskov Substitution Principle, além de estruturar muito 
bem as suas abstrações, em alguns casos, você precisara usar a injeção de 
dependência e também usar outros princípios do SOLID, como por exemplo, o 
Open-Closed Principle e o Interface Segregation Principle — será abordado 
no próximo tópico.

Seguir o LSP nos permite usar o polimorfismo com mais confiança. Podemos 
chamar nossas classes derivadas referindo-se à sua classe base sem preocupações
com resultados inesperados.
